<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Base32编码]]></title>
    <url>%2F2018%2F03%2F08%2FBase32%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[这是一个基于32个编码表示的数字系统参考维基百科/wiki/Base32]]></content>
      <categories>
        <category>计算机基础科学</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>解密</tag>
        <tag>计算机基础科学</tag>
        <tag>原理</tag>
        <tag>Base32</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Base64编码]]></title>
    <url>%2F2018%2F03%2F08%2FBase64%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[Base64这是一个基于64位字符表示的数字系统，只用64个字符可转换来代表二进制数值或其他进制字符。在计算机科学中这64个字符，一般选取ASCII码其中64个字符来表示数码。Base64有不同的设计版本，对应不同字符表(编码表)，其中前62个字符对应的是：26个字母大小写，10个数字。第63和64位，这最后2个字符因不同的操作系统设计标准，历史不同版本设计协议，和电子通信环境需求，选用了不同符号表示。详细请参考维基百科/wiki/Base64，以下是标准Base64编码表。 Value Char Value Char Value Char Value Char 0 A 16 Q 32 g 48 w 1 B 17 R 33 h 49 x 2 C 18 S 34 i 50 y 3 D 19 T 35 j 51 z 4 E 20 U 36 k 52 0 5 F 21 V 37 l 53 1 6 G 22 W 38 m 54 2 7 H 23 X 39 n 55 3 8 I 24 Y 40 o 56 4 9 J 25 Z 41 p 57 5 10 K 26 a 42 q 58 6 11 L 27 b 43 r 59 7 12 M 28 c 44 s 60 8 13 N 29 d 45 t 61 9 14 O 30 e 46 u 62 + 15 P 31 f 47 v 63 / Base64加密解密算法原理明文字符串,举个栗子abcd,里每个单字符对应ASCII编码表都有二进制的的8位字节表示，如： 原文字符串 ASCII字符码 a b c d ASCII二进制码 01100001 01100010 01100011 01100100 手算数学步骤： 步骤1==&gt; 分段处理字符串，每段读取3个字节 [ 01100001 01100010 01100011] [01100100] 步骤2==&gt; 将每段每个原来的8位3个字节，分成6位4个字节 [ 011000 010110 001001 100011] [011001 00] 步骤3==&gt; 给不足6位4个字节的数据段填充0，输出字符使用 ‘=’ [011000 010110 001001 100011] [011001 000000 000000 000000 ] (可选)步骤4==&gt; 转换成十进制 [ 24 22 9 35 ][ 25 0 = = ] 步骤5==&gt; 查Base64编码表 [ Y W J j ][ Z A = = ] 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071输入：abcd处理：Base64编码 encode加密输出：YWJjZA==[a b c] [d][01100001 01100010 01100011] [01100100][011000 01 0110 0010 01 100011] [011001 00]/*---------数据第一分段处理------------*/// ### 处理第1字节a01100001011000-- &gt;&gt;2 // 01100001向右移2位 01100001=&gt;xx011000011000 24Y //输出结果 Y , 在Base64编码表十进制值为24// ### 处理第2字节a b01100001 01100010------01 &lt;&lt;6 // 01100001向左移6位 01100001=&gt;01xxxxxx----0001 &gt;&gt;2 // 01xxxxxx向右移2位 01xxxxxx=&gt;xx01xxxx0110---- &gt;&gt;4 // 01100010向右移4位 01100010=&gt;xxxx011001011000010110 //高位 0001xxxx 添加 低位 xxxx0110, 0001xxxx | xxxx0110=0001011022G //输出结果 G , 在Base64编码表十进制值为22// ### 处理第3字节b c01100010 01100011----0010 &lt;&lt;4 // 01100010向左移4位 01100010=&gt;0010xxxx--000010 &gt;&gt;2 // 0010xxxx向右移2位 0010xxxx=&gt;xx0010xx01------ &gt;&gt;6 // 01100011向右移6位 01100011=&gt;xxxxxx01001001 // 高位 xx0010xx 添加 低位 xxxxxx01, xx0010xx|xxxxxx01=000010019J //输出结果 J , 在Base64编码表十进制值为9// ### 处理第4字节c01100011--100011 // 01100011取最后6位， 即对 00111111 &amp; 01100011 = 0010001135j //输出结果 j , 在Base64编码表十进制值为35/*---------数据第二分段处理------------*/[01100100 00000000 00000000]// ### 处理第1字节d01100100011001-- &gt;&gt;2 // 01100100向右移2位 01100100=&gt;xx0110010110010001100125Z //输出结果 Z , 在Base64编码表十进制值为25// ### 处理第2字节d null01100100 00000000------00 &lt;&lt;6 // 01100100向左移6位 01100100=&gt;00xxxxxx----0000 &gt;&gt;2 // 01100100向右移2位 00xxxxxx=&gt;xx00xxxx0000---- &gt;&gt;4 // 00000000向右移4位 00000000=&gt;xxxx0000000000 // 高位 xx00xxxx 添加 低位 xxxx0000, xx00xxxx|xxxx0000=00000000000000000A //输出结果 A , 在Base64编码表十进制值为0// ### 处理填充字节null null00000000 00000000= // 输出结果 = , 填充码= // 输出结果 = , 填充码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091输入：YWJjZA==处理：Base64编码 decode解密输出：abcd---------------------------------------Y W J j Z A = =(ascii) --&gt; (base64)[01011001 01010111 01001010][01101010 01011010 00111101 00111101](ascii) Y 01011001 89 - (ascii) A 01000001 65 = (base64) 24 00011000 Y(ascii) W 01010111 87 - (ascii) A 01000001 65 = (base64) 22 00010110 W(ascii) J 01001010 74 - (ascii) A 01000001 65 = (base64) 9 00001001 J(ascii) j 01101010 106 - (ascii) A 01100001 65 - 6 = (base64) 35 00100011 j(ascii) Z 01011010 90 - (ascii) A 01000001 65 = (base64) 25 00011001‬ Z(ascii) = 00111101 61 - (ascii) A 01000001 65 = -4 00000000(ascii) = 00111101 61 - (ascii) A 01000001 65 = -4 00000000[0-9](ascii) 0 00110000 48 - (ascii) A 01000001 65 + 69 = (base64) 52 000011001‬ 0(ascii) 0 00110000 48 - (-4) = (base64) 52 000011001‬ 0(ascii) 9 00110000 57 - (-4) = (base64) 61 000011001‬ 9[a-z](ascii) j 01101010 106 - (ascii) A 01100001 65 - 6 = (base64) 35 00100011 j(ascii) j 01101010 106 - 71 = 01100001 61 = (base64) 35 00100011 j(base64)[00011000 00010110 00001001 00100011] [00011001‬ 00000000 00111101 00111101]00011000 --01 0110 --0010 01 --100011/*---------数据第一分段处理------------*/[00011000 00010110 00001001 00100011] Y W J jY W00011000 0001011000011000 --011000 &lt;&lt;2 // 高位 00011000 向左移2位 00011000=&gt;011000xx00010110 01---- &gt;&gt;4 // 低位 00010110 向右移4位 00010110=&gt;xxxx000101100001 // 高位 011000xx 添加 低位 xxxxxx01, 01100000 | 00000001 = 0110000197a //输出结果 a , 在ASCII编码表十进制值为97W J00010110 0000100100010110----0110 &lt;&lt;4 // 高位 00010110 向左移4位 00010110=&gt;0110xxxx00001001000010-- &gt;&gt;2 // 低位 00001001向右移2位 00001001=&gt;xx00001001100010 // 高位 0110xxxx 添加 低位 xx000010, 0110xxxx | xx000010 = 0110001098b //输出结果 b , 在ASCII编码表十进制值为98J j00001001 0010001100001001------01 &lt;&lt;6 // 高位 00001001向左移6位 00001001=&gt;01xxxxxx00100011 // 保留低位 0010001101100011 // 高位 01xxxxxx 添加 00100011, 01xxxxxx | 00100011 = 0110001199c //输出结果 c , 在ASCII编码表十进制值为99/*---------数据第二分段处理------------*/[00011001‬ 00000000 00111101 00111101] Z A = =Z AY W00011001‬ 0000000000011001‬ --011001 &lt;&lt;2 // 高位 00011001‬ 向左移2位 00011001‬=&gt;011001‬xx00000000 00---- &gt;&gt;4 // 低位 00000000 向右移4位 00000000=&gt;xxxx000001100100 // 高位 011001‬xx 添加 低位 xxxx0000, 011001‬xx | xxxx0000 = 01100100100d //输出结果 d , 在ASCII编码表十进制值为100A =00000000 0011110100000000----0000 &lt;&lt;4 // 高位 00000000 向左移4位 00000000=&gt;0000xxxx00111101000000-- &gt;&gt;2 // 低位 00111101 向右移2位 00111101=&gt;xx00111100001111 // 高位 0000xxxx 添加 低位 xx000000, 0000xxxx | xx001111 = 000011110x0F15SI (shift in) 启用切换 //输出结果 SI , 在ASCII编码表十进制值为15= =00111101 0011110100111101------01 &lt;&lt;6 // 高位 00001001向左移6位 00111101=&gt;01xxxxxx00111101 // 保留低位 0011110101111101 // 高位 01xxxxxx 添加 00100011, 01xxxxxx | 00111101 = 01111101125&#123; //输出结果 &#123; , 在ASCII编码表十进制值为125]]></content>
      <categories>
        <category>计算机基础科学</category>
      </categories>
      <tags>
        <tag>Base64</tag>
        <tag>加密</tag>
        <tag>解密</tag>
        <tag>计算机基础科学</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下载地址解析]]></title>
    <url>%2F2018%2F03%2F07%2F%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[0x01 应用程序 By Weijun Lai, Version: 1.0 请输入下载链接地址：迅雷，快车，旋风 解析转换 0x02 技术解析： 各类下载链接地址都有固定的编码格式，便于网络通信程序识别和处理。以下收集了些各类常见链接协议的固定格式。 0x021 固定格式 &#124; HTTP链接地址 http:// 12&lt;明文URL&gt;http://laiweijun.com/file.txt 迅雷链接地址 thunder:// 123456thunder://AA&lt;明文URL&gt;ZZ[处理]AA&lt;明文URL&gt;ZZ ==&gt; AAhttp://laiweijun.com/file.txtZZ==&gt; Base64编码 ==&gt; QUFodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0Wlo=[输出]thunder://QUFodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0Wlo= 磁力链接格式 magnet:? 1234magnet:?xl=&lt;字节大小&gt; &amp; dn=&lt;文件名(已编码URL)&gt; &amp; xt=urn:tree:tiger:&lt;TTH hash(Base32)&gt;magnet:?xt=urn:btih:D84ABC1F6605F03BC363E758805EC1A1550DA751v1: magnet:?xt=urn:btih:&lt;info-hash&gt;&amp;dn=&lt;name&gt;&amp;tr=&lt;tracker-url&gt;&amp;x.pe=&lt;peer-address&gt;v2: magnet:?xt=urn:btmh:&lt;tagged-info-hash&gt;&amp;dn=&lt;name&gt;&amp;tr=&lt;tracker-url&gt;&amp;x.pe=&lt;peer-address&gt; 参数 dn（显示名称）- display name的缩写，表示向用户显示的文件名。这是可选项。 xl（绝对长度）- 文件字节数 xt（eXact Topic）- exact topic的缩写，包含文件散列函数值的 URN, 表示资源定位点 BTIH（BitTorrent Info Hash）表示哈希方法名，这里还可以使用SHA1和MD5 as（可接受来源） - 在线文件的网络链接 xs（绝对资源）- P2P链接 kt（关键字）- 用于搜索的关键字 mt（文件列表）- 链接到一个包含磁力连结的元文件 (MAGMA - MAGnet MAnifest) tr（Tracker 地址）- BT下载的Tracker URL 快车链接地址 flashget:// 1234flashget://[FLASHGET]&lt;明文URL&gt;[FLASHGET]==&gt; [FLASHGET]http://laiweijun.com/file.txt[FLASHGET]==&gt; Base64编码 ==&gt; JTVCRkxBU0hHRVQlNURodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0JTVCRkxBU0hHRVQlNUQ=&amp;anycodeflashget://JTVCRkxBU0hHRVQlNURodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0JTVCRkxBU0hHRVQlNUQ=&amp;anycode 旋风链接地址 qqdl:// 12qqdl://&lt;已编码URL&gt;qqdl://aHR0cCUzQS8vbGFpd2VpanVuLmNvbS9maWxlLnR4dA== 电驴链接地址 ed2k:// 12ed2k://|file|&lt;文件名称&gt;|&lt;文件大小&gt;|&lt;文件哈希值&gt;|/ed2k://|file|cn_windows_10_multi-edition_vl_version_1709_updated_dec_2017_x64_dvd_100406208.iso|5007116288|317BDC520FA2DD6005CBA8293EA06DF6|/ 0x022 编码Base64 Base32 Base16 Base85 Base16 Base64详细可查看Base64编码这篇文章 Base32详细可查看Base32编码这篇文章]]></content>
      <categories>
        <category>WebApp</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>解析</tag>
        <tag>应用</tag>
        <tag>迅雷</tag>
        <tag>磁力</tag>
        <tag>快车</tag>
        <tag>旋风</tag>
        <tag>电驴</tag>
        <tag>BT种子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018两会学习]]></title>
    <url>%2F2018%2F03%2F07%2F2018%E4%B8%A4%E4%BC%9A%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[今年两会发了很多个大红包，减轻了各种人群生产活动的负担，鼓励更多人参与劳动致富走向更好生活质量的中国梦。 简要1. √ 取消漫游流量 城乡网络全覆盖2. √ 提高个人所得税起征点3. √ 鼓励创业 发展智能产业4. √ 数字中国….]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>两会</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[🔒空间布局]]></title>
    <url>%2F2018%2F03%2F06%2F%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[请输入密码 U2FsdGVkX19SkoBOT8/5XC3gBbK2NvR2eFtJzYrnWo3nXH2F684mecvpYipAVlQSpvgdFNRsXPzjojguaOLxJ51sMbdDtd4DGe3ovJu7V5rutyvVWBIehryx+CEs/+Np/nsHlWwm3gu0d4EH+P/AcGlyFH5tif4YTTe6vdM83CTIDd8+afeRWkgrcMBb6mgO9q2sW9kG9VXi+AW1QjzArt/Pwbkx8LOAfSdcuF5nZIqHcZQXZ/eGQOyZsD47zAtJJP/psnxj2xdP1T7EXNo9Bx79nTf85X1MNpSo3Sp4Zk79wsKzKXlpPW3+YaK2ufm5I2pHYPpQI95NGUu6Dj3qJXYRXPi8KOrPq7Ugzd0sv5HwVLvJ3aEZBawKLXFMLnxW4h2Cn8QGWdF53etfqM6wttqDW8lxoW5+emi+Kz8CQE1zn8EHJmKE30PGPY1TfY8UReyeIqjyjF6O2+vwqxWdlVGSWbkdxVHS/eKk/prqg5Zk99zBXT5bkDr3Chsedg/IZLkN6EL9ZJWAld7JcndxBXg4UKN8J3SHPuPLQ4EqVyvsRPx0wXPARz+RPAdz6x6klGT+9qQeeNXwCIISURes9Ue0cB5fJOTR0mix5Xzewn7wbxnjdvQ7xILT3ZTncKq3eruQ2O8ar8opH2HJk7BGHWWtZ8NlabD23oo+DSrRzRSvYUtLnCnZ2RPtQzblNJqMAj2V12LUDMT0Qe9J7YsXP4kxQxUBl1FVMup/ogdCsT42CEqda9tE94wC9e1V9xGnGALOA7JqhZoASQfhbmrviiIZJulGEs0WOSV8/S6qF4QOdzPNSikNZiGGjFoeA3f1akNaIPV8OK9JA/eP1Np9nffqPUtDyRmoVSui/Lqw+ystQ9CCdaDbRPqofFzbjUmiKXlwcgIprqFNcnmr/vNT+RWJB1gnF4MLfU4MGRwD9hBMl5CxFGxxtzUgOqXK1xXXpcWhtmiWc3QnbGsL4mlYgtCkUaT0mdQ1nQc05nPVZLp35QxUdjXecDZoCnxyOalH4cIAjzOy7WAHahtlvx/3Xwj4vAOQfaM5selXaZR0/2EkU4w9Z025SQvY5Lij/bLBbkAXp86y1bkQ/fyWSzSgQv34LvZ3TE9EagBgd3vWBhe0eiom4apYGd+7+r6t77uuY3c+0QzzINoSg9LtQbTpQN5p0zugOLuql3ENIuLuaCUHJSvzO7XTB1sp30AdXIwMpptF1n5Ri24X3r/rja53DiDRUbBsAgdoS5UBHUTbeA1g+DxxZATUkoDwVI/KIk2lMl8pQuHBK2DYlIx62O0QTMpuDb3EidCXt3+4fnabKeUFD6RbrRFU4GA8jw+khUY5Qh/+Kax1GluUXKHJcbysbSba83wxUDtHPcWBzCWWjfgt9jQuRPP4mGEocp3H5p/o4InuikPAUqOX7ePLjvt/5ihKkCi/xvrFYMpEauX0IRNQ4qfbuUgIoTpAVWGZ1fttdmHjMoZspRYdmluB+cwOjec6fRAc70l/Vf1clGGZzCfN5ymKDvOIH0GPyXlCCcxU+bCXeyPDmylR/q2e6ACXXw9RU9g1bVUzlUhlkVCEk2/xIcTdjun+I/dTK4kyUG+TW4KlTWQRGCk+DjBcciUzKwPouQ37hhh/PXUbIF9yr72zzM5NdJ4qJqnxPiKHIMti0WKKE6OHyT/sn9GrYfQovs/Z9R+eO82UeshX6Qloteh0nMvyXT2JvCzowWAO2Ly+yWgtbIGe1EIh+JB+6HOEJJdaofHIUH8vx02XUVuhLKw=]]></content>
      <categories>
        <category>布局</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[迁移数据]]></title>
    <url>%2F2018%2F03%2F06%2F%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[本文已经迁移直云端显示正常可以多端协同编辑博客现在这是mac电脑修改的内容//to do现在这是pc电脑修改的内容//to do 正文可以看到新行~~ test syc新行| Tables | Are | Cool || ————- |:————-:| —–:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 新行[] good to know everything is ok. 结尾真是太好了很好很好，已经可以多端协同编写文章了。]]></content>
      <categories>
        <category>Hexo练习</category>
      </categories>
      <tags>
        <tag>迁移</tag>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[🔒今天天气真好！]]></title>
    <url>%2F2018%2F03%2F02%2F%E3%80%90%E5%8A%A0%E5%AF%86%E3%80%91%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%E7%9C%9F%E5%A5%BD%EF%BC%81%2F</url>
    <content type="text"><![CDATA[请输入密码 U2FsdGVkX19E924jvKlSZLWcW15gRilSgan9By32exazb/3HQqXLN5h3yCD2rZ5QC+xkeGIyFk7bF2Xj8qen8lVaNKZcEb1wC60nDijkJYzMDNpeMpxty/HEBAyCdN2Na0JF9trSyzGS5ZU/YrpKChe5A5RJJUGZVTA/UZvwQlZ4+jbSCgc4c9TA1q7yOT66bXxaFXmRna0wvZm0qv4Ld49H1uGtOjXAaaMyLn264SQUfwumMimdKZPnInTSioRX9+SYCw64zGa9gmP+Kg13qXQauNL01KvxJcaPl79jVltgkvjWrEXfE62DsXK91dwtiRdBgXwp/20bi0J9HvuRllTPQcuf1XnN9cBcRogHMoEwxP+JCMjEDiywZdx2z7CDrqKflCmC+7g1x9tZjb1By8i8TtdEUe59ti75bACQEIwTR3RudSAQ47vqRr4bbBHhVg4PVIN+WIlWNQ69PO9vmMaKCQNtRCTPDFd6tyNSVNdoWH+b0XmFSMUl01vHEg45E+UMLd/3SdD/dkheCZ5KymB5e3vcnLTwuzvcGPH28fw4/5b3f/tH/UUDPP11Ml5/6ack7rKRFD0mXhKcYQ0fNAtgp2yFx724XmpKfzTmxz9Ao/qZtz4k+Rv4ozRwlwx5wog9WVD5THTyy6tc2gqOlPVqU2y0Be1dmvmW0+NERFRQXfbr8IZEOayfizBXx/Af]]></content>
      <categories>
        <category>Hexo练习</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中文]]></title>
    <url>%2F2018%2F03%2F01%2F%E4%B8%AD%E6%96%87%2F</url>
    <content type="text"><![CDATA[中文文字显示测试，看看中文是否可以正常显示。 以下是测试内容开始这是一个开始字段换行换行换行换行换行换行换行换行换行换行 内容本文内容相当精彩换行换行换行换行换行换行换行 最后谢谢您的阅读换行换行换行换行换行换行]]></content>
      <categories>
        <category>Hexo练习</category>
      </categories>
      <tags>
        <tag>中文</tag>
        <tag>测试</tag>
        <tag>显示</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[来自1900]]></title>
    <url>%2F1900%2F03%2F02%2F%E6%9D%A5%E8%87%AA1999%2F</url>
    <content type="text"><![CDATA[假设这篇文章是1900年的老文章。看看hexo是否会自动归类和正确显示时间信息 这里有历史旧闻故事]]></content>
      <categories>
        <category>Hexo练习</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>旧闻</tag>
        <tag>故事</tag>
      </tags>
  </entry>
</search>
