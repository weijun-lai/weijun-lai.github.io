<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weijun Lai</title>
  
  <subtitle>less is more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://laiweijun.com/"/>
  <updated>2018-03-10T07:28:38.161Z</updated>
  <id>http://laiweijun.com/</id>
  
  <author>
    <name>Weijun Lai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Base32编码</title>
    <link href="http://laiweijun.com/2018/03/08/Base32%E7%BC%96%E7%A0%81/"/>
    <id>http://laiweijun.com/2018/03/08/Base32编码/</id>
    <published>2018-03-08T10:02:20.000Z</published>
    <updated>2018-03-10T07:28:38.161Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这是一个基于32个编码表示的数字系统<br><a href="https://en.wikipedia.org/wiki/Base32" target="_blank" rel="noopener">参考维基百科/wiki/Base32</a></p>]]></content>
    
    <summary type="html">
    
      本文学习Base32编码的相关基础知识，通过不同演算过程，详细解释Base32编码加密解密原理，从而对实例代码进行深入探讨
    
    </summary>
    
      <category term="计算机基础科学" scheme="http://laiweijun.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Base32" scheme="http://laiweijun.com/tags/Base32/"/>
    
      <category term="加密" scheme="http://laiweijun.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="解密" scheme="http://laiweijun.com/tags/%E8%A7%A3%E5%AF%86/"/>
    
      <category term="计算机基础科学" scheme="http://laiweijun.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%A7%91%E5%AD%A6/"/>
    
      <category term="原理" scheme="http://laiweijun.com/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Base64编码</title>
    <link href="http://laiweijun.com/2018/03/08/Base64%E7%BC%96%E7%A0%81/"/>
    <id>http://laiweijun.com/2018/03/08/Base64编码/</id>
    <published>2018-03-08T09:40:18.000Z</published>
    <updated>2018-03-09T14:16:05.415Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>这是一个基于64位字符表示的数字系统，只用64个字符可转换来代表二进制数值或其他进制字符。在计算机科学中这64个字符，一般选取ASCII码其中64个字符来表示数码。Base64有不同的设计版本，对应不同字符表(编码表)，其中前62个字符对应的是：26个字母大小写，10个数字。第63和64位，这最后2个字符因不同的操作系统设计标准，历史不同版本设计协议，和电子通信环境需求，选用了不同符号表示。<a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">详细请参考维基百科/wiki/Base64</a>，以下是标准Base64编码表。</p><table><thead><tr><th>Value</th><th>Char</th><th>Value</th><th>Char</th><th>Value</th><th>Char</th><th>Value</th><th>Char</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>16</td><td>Q</td><td>32</td><td>g</td><td>48</td><td>w</td></tr><tr><td>1</td><td>B</td><td>17</td><td>R</td><td>33</td><td>h</td><td>49</td><td>x</td></tr><tr><td>2</td><td>C</td><td>18</td><td>S</td><td>34</td><td>i</td><td>50</td><td>y</td></tr><tr><td>3</td><td>D</td><td>19</td><td>T</td><td>35</td><td>j</td><td>51</td><td>z</td></tr><tr><td>4</td><td>E</td><td>20</td><td>U</td><td>36</td><td>k</td><td>52</td><td>0</td></tr><tr><td>5</td><td>F</td><td>21</td><td>V</td><td>37</td><td>l</td><td>53</td><td>1</td></tr><tr><td>6</td><td>G</td><td>22</td><td>W</td><td>38</td><td>m</td><td>54</td><td>2</td></tr><tr><td>7</td><td>H</td><td>23</td><td>X</td><td>39</td><td>n</td><td>55</td><td>3</td></tr><tr><td>8</td><td>I</td><td>24</td><td>Y</td><td>40</td><td>o</td><td>56</td><td>4</td></tr><tr><td>9</td><td>J</td><td>25</td><td>Z</td><td>41</td><td>p</td><td>57</td><td>5</td></tr><tr><td>10</td><td>K</td><td>26</td><td>a</td><td>42</td><td>q</td><td>58</td><td>6</td></tr><tr><td>11</td><td>L</td><td>27</td><td>b</td><td>43</td><td>r</td><td>59</td><td>7</td></tr><tr><td>12</td><td>M</td><td>28</td><td>c</td><td>44</td><td>s</td><td>60</td><td>8</td></tr><tr><td>13</td><td>N</td><td>29</td><td>d</td><td>45</td><td>t</td><td>61</td><td>9</td></tr><tr><td>14</td><td>O</td><td>30</td><td>e</td><td>46</td><td>u</td><td>62</td><td>+</td></tr><tr><td>15</td><td>P</td><td>31</td><td>f</td><td>47</td><td>v</td><td>63</td><td>/</td></tr></tbody></table><h3 id="Base64加密解密算法原理"><a href="#Base64加密解密算法原理" class="headerlink" title="Base64加密解密算法原理"></a>Base64加密解密算法原理</h3><p>明文字符串,举个栗子<strong>abcd</strong>,里每个单字符对应ASCII编码表都有二进制的的8位字节表示，如：</p><table><thead><tr><th>原文字符串</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>ASCII字符码</td><td>a</td><td>b</td><td>c</td><td>d</td></tr><tr><td>ASCII二进制码</td><td>01100001</td><td>01100010</td><td>01100011</td><td>01100100</td></tr></tbody></table><h3 id="手算数学步骤："><a href="#手算数学步骤：" class="headerlink" title="手算数学步骤："></a>手算数学步骤：</h3><table><thead><tr><th>步骤1==&gt; 分段处理字符串，每段读取3个字节</th></tr></thead><tbody><tr><td><strong>[</strong> <strong>01100001</strong> 01100010 01100011<strong>]</strong> <strong>[</strong>01100100<strong>]</strong></td></tr><tr><td><strong>步骤2==&gt; 将每段每个原来的8位3个字节，分成6位4个字节</strong></td></tr><tr><td><strong>[</strong> <strong>011000</strong> 010110 001001 100011<strong>]</strong> <strong>[</strong>011001 00<strong>]</strong></td></tr><tr><td><strong>步骤3==&gt; 给不足6位4个字节的数据段填充0，输出字符使用 ‘=’ </strong></td></tr><tr><td><strong>[</strong>011000 010110 001001 100011<strong>]</strong> <strong>[</strong>011001 000000 <strong>000000</strong> <strong>000000</strong> <strong>]</strong></td></tr><tr><td><strong>(可选)步骤4==&gt; 转换成十进制</strong></td></tr><tr><td>[ 24 22 9 35 ][ 25 0 = = ]</td></tr><tr><td><strong>步骤5==&gt; 查Base64编码表</strong></td></tr><tr><td>[ Y W J j ][ Z A = = ]</td></tr></tbody></table><h3 id="计算机数学计算步骤："><a href="#计算机数学计算步骤：" class="headerlink" title="计算机数学计算步骤："></a>计算机数学计算步骤：</h3><h4 id="Base64编码-encode加密-例子"><a href="#Base64编码-encode加密-例子" class="headerlink" title="Base64编码 encode加密 例子"></a>Base64编码 encode加密 例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">输入：abcd</span><br><span class="line">处理：Base64编码 encode加密</span><br><span class="line">输出：YWJjZA==</span><br><span class="line"></span><br><span class="line">[a b c] [d]</span><br><span class="line">[<span class="number">01100001</span>  <span class="number">01100010</span>  <span class="number">01100011</span>]  [<span class="number">01100100</span>]</span><br><span class="line">[<span class="number">011000</span> <span class="number">01</span> <span class="number">0110</span> <span class="number">0010</span> <span class="number">01</span> <span class="number">100011</span>] [<span class="number">011001</span> <span class="number">00</span>]</span><br><span class="line"><span class="comment">/*---------数据第一分段处理------------*/</span></span><br><span class="line">[<span class="number">01100001</span>  <span class="number">01100010</span>  <span class="number">01100011</span>]</span><br><span class="line"><span class="comment">// ### 处理第1字节</span></span><br><span class="line">a</span><br><span class="line"><span class="number">01100001</span></span><br><span class="line"><span class="number">011000</span>-- &gt;&gt;<span class="number">2</span> <span class="comment">// 01100001向右移2位  01100001=&gt;xx011000</span></span><br><span class="line"><span class="number">011000</span>        </span><br><span class="line"><span class="number">24</span></span><br><span class="line">Y  <span class="comment">//输出结果 Y , 在Base64编码表十进制值为24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 处理第2字节</span></span><br><span class="line">a b</span><br><span class="line"><span class="number">01100001</span> <span class="number">01100010</span></span><br><span class="line">-----<span class="number">-01</span> &lt;&lt;<span class="number">6</span> <span class="comment">// 高位01100001向左移6位  01100001=&gt;01xxxxxx</span></span><br><span class="line">---<span class="number">-0001</span> &gt;&gt;<span class="number">2</span> <span class="comment">// 01xxxxxx向右移2位  01xxxxxx=&gt;xx01xxxx</span></span><br><span class="line"><span class="number">0110</span>---- &gt;&gt;<span class="number">4</span> <span class="comment">// 低位01100010向右移4位  01100010=&gt;xxxx0110</span></span><br><span class="line"><span class="number">010110</span></span><br><span class="line"><span class="number">00010110</span>       <span class="comment">//高位 0001xxxx 添加 低位 xxxx0110, 0001xxxx | xxxx0110=00010110</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line">G <span class="comment">//输出结果 G , 在Base64编码表十进制值为22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 处理第3字节</span></span><br><span class="line">b c</span><br><span class="line"><span class="number">01100010</span> <span class="number">01100011</span></span><br><span class="line">---<span class="number">-0010</span> &lt;&lt;<span class="number">4</span> <span class="comment">// 高位01100010向左移4位  01100010=&gt;0010xxxx</span></span><br><span class="line">-<span class="number">-000010</span> &gt;&gt;<span class="number">2</span> <span class="comment">// 0010xxxx向右移2位  0010xxxx=&gt;xx0010xx</span></span><br><span class="line"><span class="number">01</span>------ &gt;&gt;<span class="number">6</span> <span class="comment">// 低位01100011向右移6位  01100011=&gt;xxxxxx01</span></span><br><span class="line"><span class="number">001001</span>       <span class="comment">//  高位 xx0010xx 添加 低位 xxxxxx01, xx0010xx|xxxxxx01=00001001</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">J <span class="comment">//输出结果 J , 在Base64编码表十进制值为9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 处理第4字节</span></span><br><span class="line">c</span><br><span class="line"><span class="number">01100011</span></span><br><span class="line">-<span class="number">-100011</span> <span class="comment">// 01100011取最后6位， 即对 00111111 &amp; 01100011 = 00100011</span></span><br><span class="line"><span class="number">35</span></span><br><span class="line">j <span class="comment">//输出结果 j , 在Base64编码表十进制值为35</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------数据第二分段处理------------*/</span></span><br><span class="line">[<span class="number">01100100</span> <span class="number">00000000</span> <span class="number">00000000</span>]</span><br><span class="line"><span class="comment">// ### 处理第1字节</span></span><br><span class="line">d</span><br><span class="line"><span class="number">01100100</span></span><br><span class="line"><span class="number">011001</span>-- &gt;&gt;<span class="number">2</span> <span class="comment">// 01100100向右移2位 01100100=&gt;xx011001</span></span><br><span class="line"><span class="number">011001</span></span><br><span class="line"><span class="number">00011001</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line">Z <span class="comment">//输出结果 Z , 在Base64编码表十进制值为25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 处理第2字节</span></span><br><span class="line">d <span class="literal">null</span></span><br><span class="line"><span class="number">01100100</span> <span class="number">00000000</span></span><br><span class="line">-----<span class="number">-00</span> &lt;&lt;<span class="number">6</span> <span class="comment">// 高位01100100向左移6位 01100100=&gt;00xxxxxx</span></span><br><span class="line">---<span class="number">-0000</span> &gt;&gt;<span class="number">2</span> <span class="comment">// 01100100向右移2位 00xxxxxx=&gt;xx00xxxx</span></span><br><span class="line"><span class="number">0000</span>---- &gt;&gt;<span class="number">4</span> <span class="comment">// 低位00000000向右移4位 00000000=&gt;xxxx0000</span></span><br><span class="line"><span class="number">000000</span>       <span class="comment">// 高位 xx00xxxx 添加 低位 xxxx0000, xx00xxxx|xxxx0000=00000000</span></span><br><span class="line"><span class="number">00000000</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">A <span class="comment">//输出结果 A , 在Base64编码表十进制值为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### 处理填充字节</span></span><br><span class="line"><span class="literal">null</span> <span class="literal">null</span></span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line">=  <span class="comment">// 输出结果 = , 填充码</span></span><br><span class="line">=  <span class="comment">// 输出结果 = , 填充码</span></span><br></pre></td></tr></table></figure><h4 id="Base64编码-decode解密-例子"><a href="#Base64编码-decode解密-例子" class="headerlink" title="Base64编码 decode解密 例子"></a>Base64编码 decode解密 例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">输入：YWJjZA==</span><br><span class="line">处理：Base64编码 decode解密</span><br><span class="line">输出：abcd</span><br><span class="line">---------------------------------------</span><br><span class="line">Y W J j Z A = =</span><br><span class="line">(ascii) --&gt; (base64)</span><br><span class="line">[<span class="number">01011001</span> <span class="number">01010111</span> <span class="number">01001010</span>][<span class="number">01101010</span> <span class="number">01011010</span> <span class="number">00111101</span> <span class="number">00111101</span>]</span><br><span class="line">(ascii) Y <span class="number">01011001</span> <span class="number">89</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> = (base64) <span class="number">24</span> <span class="number">00011000</span> Y</span><br><span class="line">(ascii) W <span class="number">01010111</span> <span class="number">87</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> = (base64) <span class="number">22</span> <span class="number">00010110</span> W</span><br><span class="line">(ascii) J <span class="number">01001010</span> <span class="number">74</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> = (base64) <span class="number">9</span> <span class="number">00001001</span> J</span><br><span class="line">(ascii) j <span class="number">01101010</span> <span class="number">106</span> - (ascii) A <span class="number">01100001</span> <span class="number">65</span> - <span class="number">6</span> = (base64) <span class="number">35</span> <span class="number">00100011</span> j</span><br><span class="line">(ascii) Z <span class="number">01011010</span> <span class="number">90</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> = (base64) <span class="number">25</span> <span class="number">00011001</span>‬ Z</span><br><span class="line">(ascii) = <span class="number">00111101</span> <span class="number">61</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> = <span class="number">-4</span>  <span class="number">00000000</span></span><br><span class="line">(ascii) = <span class="number">00111101</span> <span class="number">61</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> = <span class="number">-4</span>  <span class="number">00000000</span></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">(ascii) <span class="number">0</span> <span class="number">00110000</span> <span class="number">48</span> - (ascii) A <span class="number">01000001</span> <span class="number">65</span> + <span class="number">69</span> = (base64) <span class="number">52</span> <span class="number">000011001</span>‬ <span class="number">0</span></span><br><span class="line">(ascii) <span class="number">0</span> <span class="number">00110000</span> <span class="number">48</span> - (<span class="number">-4</span>) = (base64) <span class="number">52</span> <span class="number">000011001</span>‬ <span class="number">0</span></span><br><span class="line">(ascii) <span class="number">9</span> <span class="number">00110000</span> <span class="number">57</span> - (<span class="number">-4</span>) = (base64) <span class="number">61</span> <span class="number">000011001</span>‬ <span class="number">9</span></span><br><span class="line">[a-z]</span><br><span class="line">(ascii) j <span class="number">01101010</span> <span class="number">106</span> - (ascii) A <span class="number">01100001</span> <span class="number">65</span> - <span class="number">6</span> = (base64) <span class="number">35</span> <span class="number">00100011</span> j</span><br><span class="line">(ascii) j <span class="number">01101010</span> <span class="number">106</span> - <span class="number">71</span> = (base64) <span class="number">35</span> <span class="number">00100011</span> j</span><br><span class="line">[+<span class="regexp">/]</span></span><br><span class="line"><span class="regexp">(ascii) + 00101011 43 - (-19) = (base64) 62 00111110 +</span></span><br><span class="line"><span class="regexp">(ascii) /</span> <span class="number">00101111</span> <span class="number">47</span> - (<span class="number">-16</span>) = (base64) <span class="number">63</span> <span class="number">00111111</span> /</span><br><span class="line"></span><br><span class="line">(base64)</span><br><span class="line">[<span class="number">00011000</span> <span class="number">00010110</span> <span class="number">00001001</span> <span class="number">00100011</span>] [<span class="number">00011001</span>‬ <span class="number">00000000</span> <span class="number">00111101</span> <span class="number">00111101</span>]</span><br><span class="line"><span class="number">00011000</span> -<span class="number">-01</span> <span class="number">0110</span> -<span class="number">-0010</span> <span class="number">01</span> -<span class="number">-100011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------数据第一分段处理------------*/</span></span><br><span class="line">[<span class="number">00011000</span> <span class="number">00010110</span> <span class="number">00001001</span> <span class="number">00100011</span>] Y W J j</span><br><span class="line">Y W</span><br><span class="line"><span class="number">00011000</span> <span class="number">00010110</span></span><br><span class="line"><span class="number">00011000</span>     </span><br><span class="line">-<span class="number">-011000</span> &lt;&lt;<span class="number">2</span> <span class="comment">//高位00011000 向左移2位 00011000=&gt;011000xx</span></span><br><span class="line"><span class="number">00010110</span></span><br><span class="line">  <span class="number">01</span>---- &gt;&gt;<span class="number">4</span> <span class="comment">//低位00010110 向右移4位 00010110=&gt;xxxx0001</span></span><br><span class="line"><span class="number">01100001</span>     <span class="comment">//高位011000xx 添加 低位 xxxxxx01, 01100000 | 00000001 = 01100001</span></span><br><span class="line"><span class="number">97</span></span><br><span class="line">a    <span class="comment">//输出结果 a , 在ASCII编码表十进制值为97</span></span><br><span class="line"></span><br><span class="line">W J</span><br><span class="line"><span class="number">00010110</span> <span class="number">00001001</span></span><br><span class="line"><span class="number">00010110</span></span><br><span class="line">---<span class="number">-0110</span> &lt;&lt;<span class="number">4</span> <span class="comment">//高位00010110 向左移4位 00010110=&gt;0110xxxx</span></span><br><span class="line"><span class="number">00001001</span></span><br><span class="line"><span class="number">000010</span>-- &gt;&gt;<span class="number">2</span> <span class="comment">//低位00001001向右移2位 00001001=&gt;xx000010</span></span><br><span class="line"><span class="number">01100010</span>     <span class="comment">//高位0110xxxx 添加 低位 xx000010, 0110xxxx | xx000010 = 01100010</span></span><br><span class="line"><span class="number">98</span></span><br><span class="line">b  <span class="comment">//输出结果 b , 在ASCII编码表十进制值为98</span></span><br><span class="line"></span><br><span class="line">J j</span><br><span class="line"><span class="number">00001001</span> <span class="number">00100011</span></span><br><span class="line"><span class="number">00001001</span></span><br><span class="line">-----<span class="number">-01</span> &lt;&lt;<span class="number">6</span> <span class="comment">// 高位 00001001向左移6位 00001001=&gt;01xxxxxx</span></span><br><span class="line"><span class="number">00100011</span>     <span class="comment">// 保留低位 00100011</span></span><br><span class="line"><span class="number">01100011</span>   <span class="comment">// 高位 01xxxxxx 添加 00100011, 01xxxxxx | 00100011 = 01100011</span></span><br><span class="line"><span class="number">99</span></span><br><span class="line">c <span class="comment">//输出结果 c , 在ASCII编码表十进制值为99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------数据第二分段处理------------*/</span></span><br><span class="line">[<span class="number">00011001</span>‬ <span class="number">00000000</span> <span class="number">00111101</span> <span class="number">00111101</span>] Z A = =</span><br><span class="line">Z A</span><br><span class="line"><span class="number">00011001</span>‬ <span class="number">00000000</span></span><br><span class="line"><span class="number">00011001</span>‬     </span><br><span class="line">-<span class="number">-011001</span> &lt;&lt;<span class="number">2</span> <span class="comment">// 高位 00011001‬ 向左移2位 00011001‬=&gt;011001‬xx</span></span><br><span class="line"><span class="number">00000000</span></span><br><span class="line">  <span class="number">00</span>---- &gt;&gt;<span class="number">4</span> <span class="comment">// 低位 00000000 向右移4位 00000000=&gt;xxxx0000</span></span><br><span class="line"><span class="number">01100100</span>   <span class="comment">// 高位 011001‬xx 添加 低位 xxxx0000, 011001‬xx | xxxx0000 = 01100100</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">d    <span class="comment">//输出结果 d , 在ASCII编码表十进制值为100</span></span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"><span class="number">00000000</span> <span class="number">00111101</span></span><br><span class="line"><span class="number">00000000</span></span><br><span class="line">---<span class="number">-0000</span> &lt;&lt;<span class="number">4</span> <span class="comment">// 高位 00000000 向左移4位 00000000=&gt;0000xxxx</span></span><br><span class="line"><span class="number">00111101</span></span><br><span class="line"><span class="number">001111</span>-- &gt;&gt;<span class="number">2</span> <span class="comment">// 低位 00111101 向右移2位 00111101=&gt;xx001111</span></span><br><span class="line"><span class="number">00001111</span>   <span class="comment">// 高位 0000xxxx 添加 低位 xx001111, 0000xxxx | xx001111 = 00001111</span></span><br><span class="line"><span class="number">0x0F</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line">SI (shift <span class="keyword">in</span>)启用切换  <span class="comment">//输出结果 SI , 在ASCII编码表十进制值为15</span></span><br><span class="line"></span><br><span class="line">= =</span><br><span class="line"><span class="number">00111101</span> <span class="number">00111101</span></span><br><span class="line"><span class="number">00111101</span></span><br><span class="line">-----<span class="number">-01</span> &lt;&lt;<span class="number">6</span> <span class="comment">// 高位 00001001向左移6位 00111101=&gt;01xxxxxx</span></span><br><span class="line"><span class="number">00111101</span>     <span class="comment">// 保留低位 00111101</span></span><br><span class="line"><span class="number">01111101</span>   <span class="comment">// 高位 01xxxxxx 添加 00100011, 01xxxxxx | 00111101 = 01111101</span></span><br><span class="line"><span class="number">125</span></span><br><span class="line">&#123; <span class="comment">//输出结果 &#123; , 在ASCII编码表十进制值为125</span></span><br></pre></td></tr></table></figure><script src="/js/myapps/base64.js"></script><h4 id="计算机编程语言-JavaScript-代码实现"><a href="#计算机编程语言-JavaScript-代码实现" class="headerlink" title="计算机编程语言 JavaScript 代码实现"></a>计算机编程语言 JavaScript 代码实现</h4><p><a href="/js/myapps/base64.js" target="_blank">[源代码下载]</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** 作者：Weijun Lai</span></span><br><span class="line"><span class="comment">** 时间：2018年3月9日</span></span><br><span class="line"><span class="comment">** 版本：1.0</span></span><br><span class="line"><span class="comment">** 说明：实现Base64编码的加密和解密功能。</span></span><br><span class="line"><span class="comment">**       并未对执行效率，最大处理能力和</span></span><br><span class="line"><span class="comment">**       书写简洁做优化，仅对算法细分解析。</span></span><br><span class="line"><span class="comment">**       为了便于阅读，已将原来一行复合运算代码分解成多行，因此占用了更多变量</span></span><br><span class="line"><span class="comment">**       本代码用for循环处理将会有处理字符串长度最大为integer数据类型大小的限制</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// base64编码表</span></span><br><span class="line"><span class="keyword">var</span> base64Table = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line"><span class="comment">// base64编码表最后两位</span></span><br><span class="line"><span class="keyword">var</span> char62 = <span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">var</span> char63 = <span class="string">'/'</span>;</span><br><span class="line">base64Table += char62+char63;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** base64 加密</span></span><br><span class="line"><span class="comment">** @param &#123;code&#125; String   输入字符串明文</span></span><br><span class="line"><span class="comment">** @return &#123;encode&#125; String 输出字符串密文</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_encode</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加密算法流程</span></span><br><span class="line"><span class="comment">1.分段处理，每段处理三字节</span></span><br><span class="line"><span class="comment">以下将每段(8位三字节)转为每段(6位四字节)</span></span><br><span class="line"><span class="comment">2.处理第1字节</span></span><br><span class="line"><span class="comment">2.1高位向右移2位</span></span><br><span class="line"><span class="comment">3.处理第2字节</span></span><br><span class="line"><span class="comment">3.1高位向左移6位</span></span><br><span class="line"><span class="comment">3.2高位向右移2位</span></span><br><span class="line"><span class="comment">3.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line"><span class="comment">3.4低位向右移4位</span></span><br><span class="line"><span class="comment">3.5高低位或运算</span></span><br><span class="line"><span class="comment">4.处理第3字节</span></span><br><span class="line"><span class="comment">4.1高位向左移4位</span></span><br><span class="line"><span class="comment">4.2高位向右移2位</span></span><br><span class="line"><span class="comment">4.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line"><span class="comment">4.4低位向右移6位</span></span><br><span class="line"><span class="comment">4.5高低位或运算</span></span><br><span class="line"><span class="comment">5.处理第4字节</span></span><br><span class="line"><span class="comment">5.5取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line"><span class="comment">6.处理分段不足三字节长度的填充</span></span><br><span class="line"><span class="comment">6.1分段内字节数量长度缺2个满足三字节的补2个等号'='</span></span><br><span class="line"><span class="comment">6.2分段内字节数量长度缺1个满足三字节的补1个等号'='</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> byte1 = <span class="number">0</span>;   <span class="comment">// 寄存处理第1字节的变量</span></span><br><span class="line"><span class="keyword">var</span> byte2 = <span class="number">0</span>;   <span class="comment">// 寄存处理第2字节的变量</span></span><br><span class="line"><span class="keyword">var</span> byte3 = <span class="number">0</span>;   <span class="comment">// 寄存处理第3字节的变量</span></span><br><span class="line"><span class="keyword">var</span> byte4 = <span class="number">0</span>;   <span class="comment">// 寄存处理第4字节的变量</span></span><br><span class="line"><span class="keyword">var</span> encode = <span class="string">""</span>; <span class="comment">// 寄存Base64加密后输出结果的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.分段处理，每段处理三字节</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;code.length;i=i+<span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// 2.处理第1字节</span></span><br><span class="line">byte1 = code[i].charCodeAt(); <span class="comment">//获取ascii编码表对应的值</span></span><br><span class="line">byte1 = byte1&gt;&gt;<span class="number">2</span>; <span class="comment">//2.1高位向右移2位</span></span><br><span class="line">byte1 = byte1&amp;<span class="number">0x3F</span>;<span class="comment">//2.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line">encode += base64Table[byte1]; <span class="comment">//查Base64编码表对应的值</span></span><br><span class="line"><span class="comment">// 6.处理分段不足三字节长度的填充</span></span><br><span class="line"><span class="keyword">if</span> (i+<span class="number">2</span>-code.length==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//6.1分段内字节数量长度缺2个字节满足三字节的补2个等号'='</span></span><br><span class="line">byte1 = code[i].charCodeAt(); <span class="comment">//获取ascii编码表对应的值,记为高位</span></span><br><span class="line">byte2 = <span class="number">0</span>; <span class="comment">//填充零，记为低位</span></span><br><span class="line">byte1 = byte1&lt;&lt;<span class="number">6</span>;<span class="comment">//3.1高位向左移6位</span></span><br><span class="line">byte1 = byte1&gt;&gt;<span class="number">2</span>;<span class="comment">//3.2高位向右移2位</span></span><br><span class="line">byte1 = byte1&amp;<span class="number">0x3F</span>;<span class="comment">//3.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line">byte2 = byte2&gt;&gt;<span class="number">4</span>;<span class="comment">//3.4低位向右移4位</span></span><br><span class="line">byte2 = byte1|byte2;<span class="comment">//3.5高低位或运算</span></span><br><span class="line">encode += base64Table[byte2]; <span class="comment">//查Base64编码表对应的值</span></span><br><span class="line">encode += <span class="string">"=="</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理第2字节</span></span><br><span class="line">byte1 = code[i].charCodeAt(); <span class="comment">//获取ascii编码表对应的值,记为高位</span></span><br><span class="line">byte2 = code[i+<span class="number">1</span>].charCodeAt(); <span class="comment">//获取ascii编码表对应的值,记为低位</span></span><br><span class="line">byte1 = byte1&lt;&lt;<span class="number">6</span>;<span class="comment">//3.1高位向左移6位</span></span><br><span class="line">byte1 = byte1&gt;&gt;<span class="number">2</span>;<span class="comment">//3.2高位向右移2位</span></span><br><span class="line">byte1 = byte1&amp;<span class="number">0x3F</span>;<span class="comment">//3.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line">byte2 = byte2&gt;&gt;<span class="number">4</span>;<span class="comment">//3.4低位向右移4位</span></span><br><span class="line">byte2 = byte1|byte2;<span class="comment">//3.5高低位或运算</span></span><br><span class="line">encode += base64Table[byte2]; <span class="comment">//查Base64编码表对应的值</span></span><br><span class="line"><span class="comment">// 6.处理分段不足三字节长度的填充</span></span><br><span class="line"><span class="keyword">if</span> (i+<span class="number">2</span>-code.length==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//6.2分段内字节数量长度缺1个字节满足三字节的补1个等号'='</span></span><br><span class="line">byte2 = code[i+<span class="number">1</span>].charCodeAt(); <span class="comment">//获取ascii编码表对应的值,记为高位</span></span><br><span class="line">byte3 = <span class="number">0</span>; <span class="comment">//填充零，记为低位</span></span><br><span class="line">byte2 = byte2&lt;&lt;<span class="number">4</span>;<span class="comment">//4.1高位向左移4位</span></span><br><span class="line">byte2 = byte2&gt;&gt;<span class="number">2</span>;<span class="comment">//4.2高位向右移2位</span></span><br><span class="line">byte2 = byte2&amp;<span class="number">0x3F</span>;<span class="comment">//4.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line">byte3 = byte3&gt;&gt;<span class="number">6</span>;<span class="comment">//4.4低位向右移6位</span></span><br><span class="line">byte3 = byte2|byte3;<span class="comment">//4.5高低位或运算</span></span><br><span class="line">encode += base64Table[byte3]; <span class="comment">//查Base64编码表对应的值</span></span><br><span class="line">encode += <span class="string">"="</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理第3字节</span></span><br><span class="line">byte2 = code[i+<span class="number">1</span>].charCodeAt(); <span class="comment">//获取ascii编码表对应的值,记为高位</span></span><br><span class="line">byte3 = code[i+<span class="number">2</span>].charCodeAt(); <span class="comment">//获取ascii编码表对应的值,记为低位</span></span><br><span class="line">byte2 = byte2&lt;&lt;<span class="number">4</span>;<span class="comment">//4.1高位向左移4位</span></span><br><span class="line">byte2 = byte2&gt;&gt;<span class="number">2</span>;<span class="comment">//4.2高位向右移2位</span></span><br><span class="line">byte2 = byte2&amp;<span class="number">0x3F</span>;<span class="comment">//4.3高位取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line">byte3 = byte3&gt;&gt;<span class="number">6</span>;<span class="comment">//4.4低位向右移6位</span></span><br><span class="line">byte3 = byte2|byte3;<span class="comment">//4.5高低位或运算</span></span><br><span class="line">encode += base64Table[byte3]; <span class="comment">//查Base64编码表对应的值</span></span><br><span class="line"><span class="comment">// 处理第4字节</span></span><br><span class="line">byte4 = code[i+<span class="number">2</span>].charCodeAt(); <span class="comment">//获取ascii编码表对应的值</span></span><br><span class="line">byte4 = byte4&amp;<span class="number">0x3F</span>;<span class="comment">//5.5取最后6位，即 与运算 00111111 (0x3F)</span></span><br><span class="line">encode += base64Table[byte4]; <span class="comment">//查Base64编码表对应的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> encode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ascii编码表    映射ascii编码 到 base64编码表</span></span><br><span class="line"><span class="comment">** @param &#123;char&#125;    输入单字符</span></span><br><span class="line"><span class="comment">** @return &#123;integer&#125; 输出整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asciiToBase64</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> char = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">char = code.charCodeAt();</span><br><span class="line">&#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (char == char62.charCodeAt()) &#123;</span><br><span class="line"><span class="comment">// '+' 的ascii编码映射base64编码</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">62</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (char == char63.charCodeAt()) &#123;</span><br><span class="line"><span class="comment">// '-' 的ascii编码映射base64编码</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">63</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (char &gt;= <span class="string">'0'</span>.charCodeAt() &amp;&amp; char &lt;= <span class="string">'9'</span>.charCodeAt()) &#123;</span><br><span class="line"><span class="comment">// [0-9]范围的ascii编码映射到[0-9]范围的base64编码</span></span><br><span class="line"><span class="keyword">return</span> char+<span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (char &gt;= <span class="string">'A'</span>.charCodeAt() &amp;&amp; char &lt;= <span class="string">'Z'</span>.charCodeAt()) &#123;</span><br><span class="line"><span class="comment">// [A-Z]范围的ascii编码映射到[A-Z]范围的base64编码</span></span><br><span class="line"><span class="keyword">return</span> char<span class="number">-65</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (char &gt;= <span class="string">'a'</span>.charCodeAt() &amp;&amp; char &lt;= <span class="string">'z'</span>.charCodeAt()) &#123;</span><br><span class="line"><span class="comment">// [a-z]范围的ascii编码映射到[a-z]范围的base64编码</span></span><br><span class="line"><span class="keyword">return</span> char<span class="number">-71</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** base64 解密</span></span><br><span class="line"><span class="comment">** @param &#123;code&#125; String   输入字符串密文</span></span><br><span class="line"><span class="comment">** @return &#123;encode&#125; String 输出字符串明文</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  解密算法流程</span></span><br><span class="line"><span class="comment">  1.分段处理，每段四字节，将每个加密字节从ascii编码表映射到Base64编码表</span></span><br><span class="line"><span class="comment">  以下将每段(8位四字节)转为每段(8位三字节)</span></span><br><span class="line"><span class="comment">  2.处理第1字节</span></span><br><span class="line"><span class="comment">  2.1高位向左移2位</span></span><br><span class="line"><span class="comment">2.2高位取最后8位，即 与运算 11111111 (0xFF)</span></span><br><span class="line"><span class="comment">  2.3低位向右移4位</span></span><br><span class="line"><span class="comment">  2.4高低位或运算</span></span><br><span class="line"><span class="comment">  3.处理第2字节</span></span><br><span class="line"><span class="comment">  3.1高位向左移4位</span></span><br><span class="line"><span class="comment">3.2高位取最后8位，即 与运算 11111111 (0xFF)</span></span><br><span class="line"><span class="comment">  3.3低位向右移2位</span></span><br><span class="line"><span class="comment">  3.4高低位或运算</span></span><br><span class="line"><span class="comment">  4.处理第3字节</span></span><br><span class="line"><span class="comment">  4.1高位向左移6位</span></span><br><span class="line"><span class="comment">4.2高位取最后8位，即 与运算 11111111 (0xFF)</span></span><br><span class="line"><span class="comment">  4.3低位保留</span></span><br><span class="line"><span class="comment">  4.4高低位或运算</span></span><br><span class="line"><span class="comment">  5.处理填充代表等号字符=</span></span><br><span class="line"><span class="comment">  5.1结束处理</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">var</span> byte1 = <span class="number">0</span>;   <span class="comment">// 寄存处理第1字节的变量</span></span><br><span class="line"><span class="keyword">var</span> byte2 = <span class="number">0</span>;   <span class="comment">// 寄存处理第2字节的变量</span></span><br><span class="line"><span class="keyword">var</span> byte3 = <span class="number">0</span>;   <span class="comment">// 寄存处理第3字节的变量</span></span><br><span class="line"><span class="keyword">var</span> byte4 = <span class="number">0</span>;   <span class="comment">// 寄存处理第4字节的变量</span></span><br><span class="line"><span class="keyword">var</span> decode = <span class="string">""</span>; <span class="comment">// 寄存Base64解密后输出结果的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.分段处理，每段四字节，将每个加密字节从ascii编码表映射到Base64编码表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;code.length;i=i+<span class="number">4</span>) &#123;</span><br><span class="line"><span class="comment">//5.处理填充代表等号字符=</span></span><br><span class="line"><span class="keyword">if</span> (asciiToBase64(code[i])==<span class="number">-1</span> ||</span><br><span class="line">asciiToBase64(code[i+<span class="number">1</span>])==<span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.处理第1字节</span></span><br><span class="line">byte1 = asciiToBase64(code[i]);<span class="comment">//获取ascii编码表映射到Base64编码表对应的值,记为高位</span></span><br><span class="line">byte2 = asciiToBase64(code[i+<span class="number">1</span>]);<span class="comment">//获取ascii编码表映射到Base64编码表对应的值,记为低位</span></span><br><span class="line">  byte1 = byte1&lt;&lt;<span class="number">2</span>;<span class="comment">//2.1高位向左移2位</span></span><br><span class="line">byte1 = byte1&amp;<span class="number">0xFF</span>;<span class="comment">//2.2高位取最后8位，即 与运算 11111111 (0xFF)</span></span><br><span class="line">  byte2 = byte2&gt;&gt;<span class="number">4</span>;<span class="comment">//2.3低位向右移4位</span></span><br><span class="line">  byte1 = byte1|byte2;<span class="comment">//2.4高低位或运算</span></span><br><span class="line">decode += <span class="built_in">String</span>.fromCharCode(byte1);<span class="comment">//查ascii编码表对应的值</span></span><br><span class="line"><span class="comment">//5.处理填充代表等号字符=</span></span><br><span class="line"><span class="keyword">if</span> (asciiToBase64(code[i+<span class="number">1</span>])==<span class="number">-1</span> ||</span><br><span class="line">asciiToBase64(code[i+<span class="number">2</span>])==<span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.处理第2字节</span></span><br><span class="line">byte2 = asciiToBase64(code[i+<span class="number">1</span>]);<span class="comment">//获取ascii编码表映射到Base64编码表对应的值,记为高位</span></span><br><span class="line">byte3 = asciiToBase64(code[i+<span class="number">2</span>]);<span class="comment">//获取ascii编码表映射到Base64编码表对应的值,记为低位</span></span><br><span class="line">  byte2 = byte2&lt;&lt;<span class="number">4</span>;<span class="comment">//3.1高位向左移4位</span></span><br><span class="line">byte2 = byte2&amp;<span class="number">0xFF</span>;<span class="comment">//2.3高位取最后8位，即 与运算 11111111 (0xFF)</span></span><br><span class="line">  byte3 = byte3&gt;&gt;<span class="number">2</span>;<span class="comment">//2.3低位向右移2位</span></span><br><span class="line">  byte2 = byte2|byte3;<span class="comment">//2.4高低位或运算</span></span><br><span class="line">decode += <span class="built_in">String</span>.fromCharCode(byte2);<span class="comment">//查ascii编码表对应的值</span></span><br><span class="line"><span class="comment">//5.处理填充代表等号字符=</span></span><br><span class="line"><span class="keyword">if</span> (asciiToBase64(code[i+<span class="number">2</span>])==<span class="number">-1</span> ||</span><br><span class="line">asciiToBase64(code[i+<span class="number">3</span>])==<span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.处理第3字节</span></span><br><span class="line">byte3 = asciiToBase64(code[i+<span class="number">2</span>]);<span class="comment">//获取ascii编码表映射到Base64编码表对应的值,记为高位</span></span><br><span class="line">byte4 = asciiToBase64(code[i+<span class="number">3</span>]);<span class="comment">//获取ascii编码表映射到Base64编码表对应的值,记为低位</span></span><br><span class="line">  byte3 = byte3&lt;&lt;<span class="number">6</span>;<span class="comment">//3.1高位向左移6位</span></span><br><span class="line">byte3 = byte3&amp;<span class="number">0xFF</span>;<span class="comment">//2.3高位取最后8位，即 与运算 11111111 (0xFF)</span></span><br><span class="line">  byte4 = byte4;<span class="comment">//2.3低位保留</span></span><br><span class="line">  byte3 = byte3|byte4;<span class="comment">//2.4高低位或运算</span></span><br><span class="line">decode += <span class="built_in">String</span>.fromCharCode(byte3);<span class="comment">//查ascii编码表对应的值</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> decode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="来自-crypto-js-js-Base64部分源代码"><a href="#来自-crypto-js-js-Base64部分源代码" class="headerlink" title="来自 crypto-js.js Base64部分源代码"></a>来自 crypto-js.js Base64部分源代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Shortcuts</span></span><br><span class="line">    <span class="keyword">var</span> C = CryptoJS;</span><br><span class="line">    <span class="keyword">var</span> C_lib = C.lib;</span><br><span class="line">    <span class="keyword">var</span> WordArray = C_lib.WordArray;</span><br><span class="line">    <span class="keyword">var</span> C_enc = C.enc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base64 encoding strategy.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> Base64 = C_enc.Base64 = &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Converts a word array to a Base64 string.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;WordArray&#125; wordArray The word array.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return &#123;string&#125; The Base64 string.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @static</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @example</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stringify: <span class="function"><span class="keyword">function</span> (<span class="params">wordArray</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Shortcuts</span></span><br><span class="line">            <span class="keyword">var</span> words = wordArray.words;</span><br><span class="line">            <span class="keyword">var</span> sigBytes = wordArray.sigBytes;</span><br><span class="line">            <span class="keyword">var</span> map = <span class="keyword">this</span>._map;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Clamp excess bits</span></span><br><span class="line">            wordArray.clamp();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert</span></span><br><span class="line">            <span class="keyword">var</span> base64Chars = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sigBytes; i += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> byte1 = (words[i &gt;&gt;&gt; <span class="number">2</span>]       &gt;&gt;&gt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>))       &amp; <span class="number">0xff</span>;</span><br><span class="line">                <span class="keyword">var</span> byte2 = (words[(i + <span class="number">1</span>) &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - ((i + <span class="number">1</span>) % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">                <span class="keyword">var</span> byte3 = (words[(i + <span class="number">2</span>) &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - ((i + <span class="number">2</span>) % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> triplet = (byte1 &lt;&lt; <span class="number">16</span>) | (byte2 &lt;&lt; <span class="number">8</span>) | byte3;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; (j &lt; <span class="number">4</span>) &amp;&amp; (i + j * <span class="number">0.75</span> &lt; sigBytes); j++) &#123;</span><br><span class="line">                    base64Chars.push(map.charAt((triplet &gt;&gt;&gt; (<span class="number">6</span> * (<span class="number">3</span> - j))) &amp; <span class="number">0x3f</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add padding</span></span><br><span class="line">            <span class="keyword">var</span> paddingChar = map.charAt(<span class="number">64</span>);</span><br><span class="line">            <span class="keyword">if</span> (paddingChar) &#123;</span><br><span class="line">                <span class="keyword">while</span> (base64Chars.length % <span class="number">4</span>) &#123;</span><br><span class="line">                    base64Chars.push(paddingChar);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> base64Chars.join(<span class="string">''</span>);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Converts a Base64 string to a word array.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param &#123;string&#125; base64Str The Base64 string.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return &#123;WordArray&#125; The word array.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @static</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @example</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        parse: <span class="function"><span class="keyword">function</span> (<span class="params">base64Str</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Shortcuts</span></span><br><span class="line">            <span class="keyword">var</span> base64StrLength = base64Str.length;</span><br><span class="line">            <span class="keyword">var</span> map = <span class="keyword">this</span>._map;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Ignore padding</span></span><br><span class="line">            <span class="keyword">var</span> paddingChar = map.charAt(<span class="number">64</span>);</span><br><span class="line">            <span class="keyword">if</span> (paddingChar) &#123;</span><br><span class="line">                <span class="keyword">var</span> paddingIndex = base64Str.indexOf(paddingChar);</span><br><span class="line">                <span class="keyword">if</span> (paddingIndex != <span class="number">-1</span>) &#123;</span><br><span class="line">                    base64StrLength = paddingIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert</span></span><br><span class="line">            <span class="keyword">var</span> words = [];</span><br><span class="line">            <span class="keyword">var</span> nBytes = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; base64StrLength; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> bits1 = map.indexOf(base64Str.charAt(i - <span class="number">1</span>)) &lt;&lt; ((i % <span class="number">4</span>) * <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">var</span> bits2 = map.indexOf(base64Str.charAt(i)) &gt;&gt;&gt; (<span class="number">6</span> - (i % <span class="number">4</span>) * <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">var</span> bitsCombined = bits1 | bits2;</span><br><span class="line">                    words[nBytes &gt;&gt;&gt; <span class="number">2</span>] |= (bitsCombined) &lt;&lt; (<span class="number">24</span> - (nBytes % <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">                    nBytes++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> WordArray.create(words, nBytes);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        _map: <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文学习Base64编码的相关基础知识，通过不同演算过程，详细解释Base64编码加密解密原理，从而对实例代码进行深入探讨
    
    </summary>
    
      <category term="计算机基础科学" scheme="http://laiweijun.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="加密" scheme="http://laiweijun.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="解密" scheme="http://laiweijun.com/tags/%E8%A7%A3%E5%AF%86/"/>
    
      <category term="计算机基础科学" scheme="http://laiweijun.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%A7%91%E5%AD%A6/"/>
    
      <category term="原理" scheme="http://laiweijun.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="Base64" scheme="http://laiweijun.com/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>下载地址解析</title>
    <link href="http://laiweijun.com/2018/03/07/%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90/"/>
    <id>http://laiweijun.com/2018/03/07/下载地址解析/</id>
    <published>2018-03-07T06:52:41.000Z</published>
    <updated>2018-03-10T11:23:40.587Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><h3 id="0x01-应用程序"><a href="#0x01-应用程序" class="headerlink" title="0x01 应用程序"></a>0x01 应用程序</h3></blockquote><p><link href="/css/bootstrap_custom.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/js/myapps/downloader.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script></p><p><div id="webapp" class="webapp"><div class="copyright-info">By Weijun Lai, Version: 1.0</div><div class="input-container"><label> 请输入下载链接地址：迅雷 快车 旋风 磁力</label><br>        <textarea class="form-control" id="urlText" rows="6" placeholder=" 请输入下载地址 "></textarea><br>        <textarea id="resultText" class="form-control" rows="6" placeholder=" 结果 "></textarea><br>        <button type="button" class="btn btn-primary" onclick="onMyClicked()">解析转换</button></div></div></p><p><div></div></p><hr><blockquote><h3 id="0x02-技术解析："><a href="#0x02-技术解析：" class="headerlink" title="0x02 技术解析："></a>0x02 技术解析：</h3><p>  各类下载链接地址都有固定的编码格式，便于网络通信程序识别和处理。以下收集了些各类常见链接协议的固定格式。</p></blockquote><blockquote><h4 id="0x021-固定格式-124"><a href="#0x021-固定格式-124" class="headerlink" title="0x021 固定格式 &#124;"></a>0x021 固定格式 &#124;</h4></blockquote><blockquote><h5 id="HTTP链接地址-http"><a href="#HTTP链接地址-http" class="headerlink" title="HTTP链接地址 http://"></a>HTTP链接地址 http://</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;明文URL&gt;</span><br><span class="line">http://laiweijun.com/file.txt</span><br></pre></td></tr></table></figure><blockquote><h5 id="迅雷链接地址-thunder"><a href="#迅雷链接地址-thunder" class="headerlink" title="迅雷链接地址 thunder://"></a>迅雷链接地址 thunder://</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thunder://AA&lt;明文URL&gt;ZZ</span><br><span class="line">[处理]</span><br><span class="line">AA&lt;明文URL&gt;ZZ ==&gt; AAhttp://laiweijun.com/file.txtZZ</span><br><span class="line">==&gt; Base64编码 ==&gt; QUFodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0Wlo=</span><br><span class="line">[输出]</span><br><span class="line">thunder://QUFodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0Wlo=</span><br></pre></td></tr></table></figure><blockquote><h5 id="磁力链接格式-magnet"><a href="#磁力链接格式-magnet" class="headerlink" title="磁力链接格式 magnet:?"></a>磁力链接格式 magnet:?</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">magnet:?xl=&lt;字节大小&gt; &amp; dn=&lt;文件名(已编码URL)&gt; &amp; xt=urn:tree:tiger:&lt;TTH hash(Base32)&gt;</span><br><span class="line">magnet:?xt=urn:btih:D84ABC1F6605F03BC363E758805EC1A1550DA751</span><br><span class="line">v1: magnet:?xt=urn:btih:&lt;info-hash&gt;&amp;dn=&lt;name&gt;&amp;tr=&lt;tracker-url&gt;&amp;x.pe=&lt;peer-address&gt;</span><br><span class="line">v2: magnet:?xt=urn:btmh:&lt;tagged-info-hash&gt;&amp;dn=&lt;name&gt;&amp;tr=&lt;tracker-url&gt;&amp;x.pe=&lt;peer-address&gt;</span><br></pre></td></tr></table></figure><blockquote><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><ul><li>dn（显示名称）- display name的缩写，表示向用户显示的文件名。这是可选项。</li><li>xl（绝对长度）- 文件字节数</li><li>xt（eXact Topic）- exact topic的缩写，包含文件散列函数值的 URN, 表示资源定位点</li><li>BTIH（BitTorrent Info Hash）表示哈希方法名，这里还可以使用SHA1和MD5</li><li>as（可接受来源） - 在线文件的网络链接</li><li>xs（绝对资源）- P2P链接</li><li>kt（关键字）- 用于搜索的关键字</li><li>mt（文件列表）- 链接到一个包含磁力连结的元文件 (MAGMA - MAGnet MAnifest)</li><li>tr（Tracker 地址）- BT下载的Tracker URL</li></ul></blockquote><blockquote><h5 id="快车链接地址-flashget"><a href="#快车链接地址-flashget" class="headerlink" title="快车链接地址 flashget://"></a>快车链接地址 flashget://</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flashget://[FLASHGET]&lt;明文URL&gt;[FLASHGET]</span><br><span class="line">==&gt; [FLASHGET]http://laiweijun.com/file.txt[FLASHGET]</span><br><span class="line">==&gt; Base64编码 ==&gt; JTVCRkxBU0hHRVQlNURodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0JTVCRkxBU0hHRVQlNUQ=&amp;anycode</span><br><span class="line">flashget://JTVCRkxBU0hHRVQlNURodHRwJTNBLy9sYWl3ZWlqdW4uY29tL2ZpbGUudHh0JTVCRkxBU0hHRVQlNUQ=&amp;anycode</span><br></pre></td></tr></table></figure><blockquote><h5 id="旋风链接地址-qqdl"><a href="#旋风链接地址-qqdl" class="headerlink" title="旋风链接地址 qqdl://"></a>旋风链接地址 qqdl://</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qqdl://&lt;已编码URL&gt;</span><br><span class="line">qqdl://aHR0cCUzQS8vbGFpd2VpanVuLmNvbS9maWxlLnR4dA==</span><br></pre></td></tr></table></figure><blockquote><h5 id="电驴链接地址-ed2k"><a href="#电驴链接地址-ed2k" class="headerlink" title="电驴链接地址 ed2k://"></a>电驴链接地址 ed2k://</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ed2k://|file|&lt;文件名称&gt;|&lt;文件大小&gt;|&lt;文件哈希值&gt;|/</span><br><span class="line">ed2k://|file|cn_windows_10_multi-edition_vl_version_1709_updated_dec_2017_x64_dvd_100406208.iso|5007116288|317BDC520FA2DD6005CBA8293EA06DF6|/</span><br></pre></td></tr></table></figure><blockquote><h4 id="0x022-编码"><a href="#0x022-编码" class="headerlink" title="0x022 编码"></a>0x022 编码</h4><p>Base64 Base32 Base16 Base85 Base16</p></blockquote><h5 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h5><a href="/2018/03/08/Base64编码/" title="详细可查看Base64编码这篇文章">详细可查看Base64编码这篇文章</a><h5 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h5><a href="/2018/03/08/Base32编码/" title="详细可查看Base32编码这篇文章">详细可查看Base32编码这篇文章</a>]]></content>
    
    <summary type="html">
    
      这是个在线Web小程序，用于解析转换各类下载地址。支持http，迅雷thunder，磁力magnet，快车flashget, 旋风qqdl，电驴ed2k, BT种子 等编码自动识别批量互转。
    
    </summary>
    
      <category term="WebApp" scheme="http://laiweijun.com/categories/WebApp/"/>
    
    
      <category term="下载" scheme="http://laiweijun.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="解析" scheme="http://laiweijun.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
      <category term="应用" scheme="http://laiweijun.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="迅雷" scheme="http://laiweijun.com/tags/%E8%BF%85%E9%9B%B7/"/>
    
      <category term="磁力" scheme="http://laiweijun.com/tags/%E7%A3%81%E5%8A%9B/"/>
    
      <category term="快车" scheme="http://laiweijun.com/tags/%E5%BF%AB%E8%BD%A6/"/>
    
      <category term="旋风" scheme="http://laiweijun.com/tags/%E6%97%8B%E9%A3%8E/"/>
    
      <category term="电驴" scheme="http://laiweijun.com/tags/%E7%94%B5%E9%A9%B4/"/>
    
      <category term="BT种子" scheme="http://laiweijun.com/tags/BT%E7%A7%8D%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>2018两会学习</title>
    <link href="http://laiweijun.com/2018/03/07/2018%E4%B8%A4%E4%BC%9A%E5%AD%A6%E4%B9%A0/"/>
    <id>http://laiweijun.com/2018/03/07/2018两会学习/</id>
    <published>2018-03-07T03:27:05.000Z</published>
    <updated>2018-03-10T17:04:17.798Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><hr><p>今年两会发了很多个大红包，减轻了各种人群生产活动的负担，鼓励更多人参与劳动致富走向更好生活质量的中国梦。</p><hr><h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><ol><li>~~ √ 取消漫游流量 城乡网络全覆盖</li><li>~~ √ 提高个人所得税起征点</li><li>~~ √ 鼓励创业 发展智能产业</li><li>~~ √ 数字中国<br>….</li></ol>]]></content>
    
    <summary type="html">
    
      2018年两会的学习思考
    
    </summary>
    
      <category term="学习" scheme="http://laiweijun.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="两会" scheme="http://laiweijun.com/tags/%E4%B8%A4%E4%BC%9A/"/>
    
      <category term="学习" scheme="http://laiweijun.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>🔒空间布局</title>
    <link href="http://laiweijun.com/2018/03/06/%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80/"/>
    <id>http://laiweijun.com/2018/03/06/空间布局/</id>
    <published>2018-03-06T12:02:23.000Z</published>
    <updated>2018-03-11T02:11:02.194Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="/js/src/jquery-qrcode-0.14.0/demo/jquery.min.js"></script><div id="security"><div class="input-container"><input type="hidden" id="tips" value=" VTJGc2RHVmtYMTh3M3NIWFkwRFR6aWVjNXFZTENqem5xL0JKaHNFa2kwTSUzRCUzRmFHRm9ZVE10TXclM0QlM0Q= "><input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /><label id="labelmsg" for="pass"><i class="fa fa-keyboard-o" aria-hidden="true"></i>  请输入密码 </label><div class="bottom-line"></div></div></div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/Fm34sWVSg4uiPLHNXETaSI4P8iE4i5VE1Eo0BBGsvTy7+wMFtB0Nk47w/TQjNo0NFxe55xOaF/yRlYqfadyPbGcy24Zv24ttG0ZyX/beHpPYlQUxQanGwDMvdMvvBDOGpEEcgOuznxChE16ic5a9U4Xxgbt9b/YS24ib1759S1pGPylSbTB0UgiLSbFNW+xlq6ySTcTAC2XH5xaLS7o4y0XUZPwZGMu/9Ja1PE3PXpQo8p6aZ3VcbOITMR2+weN6VP1R0oGSd4lmxHbGbaAR7CicE0KmG30TtkB19vjV7K/0gkEKNDEEbEA0zu+QXKbVzTcbZdrYX9tVcxggT7l2QinR7+0AUXV/wBGrGxcsgqfdFTLEQV6Mv8a2otGfkonBGF51JT5bOYq2svP/uCTTRz+wk4ITRTv5xAeput45dXTcOokOJdO/InqSndFGNI7SsnRqjGcSvuLzZNkn6DH3K+mKgCfThBM6SjUByai5GrbShh3WS1Xu823CHrWF7PtH/3MDeUOVhrNYn3f+saTgtKjseVuyaPHQcIeRokQWZ9bCyjr54Gm3zJsbHbPSNBaKT25nE5i21r16j39TE7gXB6CtRuiT7bTCp3ukss2PokGpDGa0AZTTbKSMGELNY2b14ZTl96uyY4hDazrPlBsZuFp8WFGb6EFhiYMeiXMdXWjujjYdTMxfR9vvXA1R0KvsSyBy4jA84+5Fc/24waYtJA1cvVqNGB1ojLwlt2s2RBni2l8cCfBfjdx3mdUV8FxUozZF+nZ9Pd3fYAsW1lOYf4NC5/eqVqr7hpa3Zsgpe4whhrjPytgvooaf/o+89Eh9MfV5tBA4ykvUu/o9oROKmpJXR31F9utlC3JeUqkbH3AuekDIfStswgmvvdUIgYgKNftb+yVmAOhW/HOxLgOO33++e8RrUGTnJno4A3f5S5Rg7FYpJ/AYNrdXhL90wTTGsEudng6RksijxR9H/Ta9uKnVWWaicamuQ983Z09I/e4o8Zxg03fnuLWmBvHgCPn6TTk3SkOUZvkDQI3UAwSLp46lSb0P7kZy9kLzAbHOOJtKOrtKsMVJFahP7VsfKh1I/mWJ3ZMkDeG05HpAAKke2RT62excxbfL0jwqco2V5RD7mIXXcsGSo77I5y2ow6N3RIp666zWM2PTLFSuguWqFoI32iACq8k+9kk/6RXc5oAtsR4eaH9spRTCoJLXXF5f+J6zWrBIQ05PmNhMbiPOzMwaS/8biRXxIDvBLfp9KL9rqXchEYnCGMNGVGj3x19yVoT/VWPid1HaITXTySFXzS8IiQX4Y37NRTCDlZYB3agB60yYVjLkYXlqydcWu0Cab8cF0ATd3lI1HoPNtuWGnwHdZ4yr5rnyoOReaZzjRpaLCPYEo+KtwFZkM27gK64xIpcpQqX3KHVRYtL1mTVXSx5E5eDQcwcrl2qOqUHPlisN+SpOUAx+z1R3ZH0Jd3mfVnfrf3yIZlLbHYhYSzSRNnNguybWgf90TAiUs59Ut+uy1pabHMa/d8bIpposXTIxufW6TmsG1eDhdyHHZU9Z0dCVUTfn+N9ajnLQFOTi0FRBmxYSBoxsc6Q9AtvFYma/KsPJ8+1+EBBDhcEoVibfva1pFWYQoY3pPp/Bs0ibc2nPOarpqEpiRcovGsHqRMDtLiYjbdx+D1gaVKm0b+fWWm3JmgF1Y1oMrvD6lMlkVqXQyuT4CnBMNDCMv9A++uco9FiBgAYfVzyjTwI84HUt7q/Ejyu4goUI=</div><script>$(document).ready(function() { $('#header,#comments,#footer,.post-meta,.post-footer').addClass('opacity0InOut');});</script>]]></content>
    
    <summary type="html">
    
      &lt;i class=&quot;fa fa-key&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 神秘的空间
    
    </summary>
    
      <category term="布局" scheme="http://laiweijun.com/categories/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="加密" scheme="http://laiweijun.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="布局" scheme="http://laiweijun.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>迁移数据</title>
    <link href="http://laiweijun.com/2018/03/06/%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE/"/>
    <id>http://laiweijun.com/2018/03/06/迁移数据/</id>
    <published>2018-03-06T05:29:46.000Z</published>
    <updated>2018-03-09T14:51:36.689Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="本文已经迁移直云端"><a href="#本文已经迁移直云端" class="headerlink" title="本文已经迁移直云端"></a>本文已经迁移直云端</h3><p>显示正常<br>可以多端协同编辑博客<br>现在这是mac电脑修改的内容<br>//to do<br>现在这是pc电脑修改的内容<br>//to do</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>可以看到<br>新行<br>~~ test syc<br>新行</p><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><p>新行<br>[] good to know everything is ok.</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>真是太好了<br>很好很好，已经可以多端协同编写文章了。</p>]]></content>
    
    <summary type="html">
    
      多端协同编辑测试
    
    </summary>
    
      <category term="Hexo练习" scheme="http://laiweijun.com/categories/Hexo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="迁移" scheme="http://laiweijun.com/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="数据" scheme="http://laiweijun.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>🔒今天天气真好！</title>
    <link href="http://laiweijun.com/2018/03/02/%E3%80%90%E5%8A%A0%E5%AF%86%E3%80%91%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%E7%9C%9F%E5%A5%BD%EF%BC%81/"/>
    <id>http://laiweijun.com/2018/03/02/【加密】今天天气真好！/</id>
    <published>2018-03-02T06:52:24.000Z</published>
    <updated>2018-03-10T15:40:33.150Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="/js/src/jquery-qrcode-0.14.0/demo/jquery.min.js"></script><div id="security"><div class="input-container"><input type="hidden" id="tips" value=" VTJGc2RHVmtYMTladnhHTXpzSzNkNVJsVXR2VkhCc3UvNEg1WlNiQTRtcyUzRCUzRmFHRm9ZVEV0TlElM0QlM0Q= "><input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /><label id="labelmsg" for="pass"><i class="fa fa-keyboard-o" aria-hidden="true"></i>  请输入密码 </label><div class="bottom-line"></div></div></div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+2Gok4NZJnC7vJ3QWq2kpMxPOq9+h3WEnfFjBMjfOasu71rm1K9ke7D6hCQKmbXe+rTEG6sqHNH0d4q2jC2rTWq4uUFm16nfWduvcncZo+qc7JbPMV4CwGLhiJMKEfpzQC0a2LFJhea9pGuAdTqrPzChZVBFTdxZx1fl18OyYjyC13uwWo3c4wivGGrc+siTZr9feEv7itFbf0iMKu3yUZd1sFLwN+TbHV/PjK6xu+Ow6UHhDfutdcS/ONQKYWHeij5lniAP6utYZOmxOPTLPEyftt7dqlfkljeTBVGksriSuKwU1KVHa8CDmYsAjm+LIxJr5g++7AAfc6Zp3Sf6krviVOa1YVEMTXvbmmR1Ja5gG1No0qDHLqVNb2PnmFAqxpepDwnGLr00tO9jUNQBNdk4I99RqOcEh2vawNOoZyR1LFqFZ4Z2uoEwdG0gso+XhqnnZQkI0W/kAQaNCo+6k9BGZa8RNuo9xv0hsaQLmtUM0zQu2OSCi8BbnbgCAet8AxwqoRm0sq6oo4FMHwCQkZruvfNqAXp8qFdUgt42tIoLgZENwlnXozR9pqRqSgwQDHyiZK6FLsJEGPVu24viEz2OxPNrmdQiJ9LqBTkp6Hkm/wLBE3eKU3jiUmgXhUB9XBQAP3bibhy4ShyM4BI1wmh53w8Kvz6m3WR4Bfbp0KNIbAtsU5FRsQ</div>]]></content>
    
    <summary type="html">
    
      &lt;i class=&quot;fa fa-key&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 文章访问需要密码&lt;/br&gt;
    
    </summary>
    
      <category term="Hexo练习" scheme="http://laiweijun.com/categories/Hexo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="加密" scheme="http://laiweijun.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="故事" scheme="http://laiweijun.com/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>中文</title>
    <link href="http://laiweijun.com/2018/03/01/%E4%B8%AD%E6%96%87/"/>
    <id>http://laiweijun.com/2018/03/01/中文/</id>
    <published>2018-03-01T15:17:25.000Z</published>
    <updated>2018-03-06T05:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>中文文字显示测试，看看中文是否可以正常显示。</p><h2 id="以下是测试内容"><a href="#以下是测试内容" class="headerlink" title="以下是测试内容"></a>以下是测试内容</h2><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这是一个开始字段<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>本文内容相当精彩<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>谢谢您的阅读<br>换行<br>换行<br>换行<br>换行<br>换行<br>换行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;中文文字显示测试，看看中文是否可以正常显示。&lt;/p&gt;
&lt;h2 id=&quot;以下是测试内容&quot;&gt;&lt;a href=&quot;#以下是测试内容&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Hexo练习" scheme="http://laiweijun.com/categories/Hexo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="中文" scheme="http://laiweijun.com/tags/%E4%B8%AD%E6%96%87/"/>
    
      <category term="测试" scheme="http://laiweijun.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="显示" scheme="http://laiweijun.com/tags/%E6%98%BE%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>来自1900</title>
    <link href="http://laiweijun.com/1900/03/02/%E6%9D%A5%E8%87%AA1999/"/>
    <id>http://laiweijun.com/1900/03/02/来自1999/</id>
    <published>1900-03-01T18:15:55.000Z</published>
    <updated>2018-03-06T05:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>假设这篇文章是1900年的老文章。<br>看看hexo是否会自动归类和正确显示时间信息</p><p>这里有历史旧闻故事</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;假设这篇文章是1900年的老文章。&lt;br&gt;看看hexo是否会自动归类和正确显示时间信息&lt;/p&gt;
&lt;p&gt;这里有历史旧闻故事&lt;/p&gt;

      
    
    </summary>
    
      <category term="Hexo练习" scheme="http://laiweijun.com/categories/Hexo%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="故事" scheme="http://laiweijun.com/tags/%E6%95%85%E4%BA%8B/"/>
    
      <category term="历史" scheme="http://laiweijun.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="旧闻" scheme="http://laiweijun.com/tags/%E6%97%A7%E9%97%BB/"/>
    
  </entry>
  
</feed>
